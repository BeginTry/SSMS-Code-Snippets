/*
	Query finds columns with the same name, but different 
	data types across all user tables in a database.
	Columns with different names that store the same "kind" of data 
	will not be discovered by this query. (eg [AccountNum] and [AccountNumber])

	NOTES: function STRING_AGG() requires SQL 2017 or above.
*/
DECLARE @LongestObjectName INT;
SELECT @LongestObjectName = MAX(LEN(c.TABLE_SCHEMA + c.TABLE_NAME)) + 4
FROM INFORMATION_SCHEMA.COLUMNS c
JOIN INFORMATION_SCHEMA.TABLES t
	ON t.TABLE_SCHEMA = c.TABLE_SCHEMA
	AND t.TABLE_NAME = c.TABLE_NAME
WHERE t.TABLE_TYPE = 'BASE TABLE'

;WITH ColumnTypes AS
(
	SELECT 
		COUNT(*) AS COLUMN_COUNT, c.COLUMN_NAME, ca.DATA_TYPE, c.CHARACTER_OCTET_LENGTH, 
		c.NUMERIC_PRECISION, c.NUMERIC_SCALE, c.COLLATION_NAME,
		STRING_AGG(QUOTENAME(c.TABLE_SCHEMA) + '.' + QUOTENAME(c.TABLE_NAME) + SPACE(@LongestObjectName - LEN(c.TABLE_SCHEMA + c.TABLE_NAME)) +
			c.DATA_TYPE + CHAR(9) +
			COALESCE(CAST(c.CHARACTER_OCTET_LENGTH AS VARCHAR(MAX)) + CHAR(9), '') +
			CASE WHEN ca.DATA_TYPE NOT IN ('numeric') THEN ''
				ELSE COALESCE('(' + CAST(c.NUMERIC_PRECISION AS VARCHAR(MAX)) + ',' + CAST(c.NUMERIC_SCALE AS VARCHAR(MAX)) + ')' + CHAR(9), '') +
					COALESCE(c.COLLATION_NAME + CHAR(9), '') END
		, CHAR(13) + CHAR(10)) AS Tables
	FROM INFORMATION_SCHEMA.COLUMNS c
	JOIN INFORMATION_SCHEMA.TABLES t
		ON t.TABLE_SCHEMA = c.TABLE_SCHEMA
		AND t.TABLE_NAME = c.TABLE_NAME
	CROSS APPLY (
		SELECT CASE 
			WHEN c.DATA_TYPE = 'decimal' THEN 'numeric' 
			ELSE c.DATA_TYPE END
			AS DATA_TYPE
	) AS ca
	WHERE t.TABLE_TYPE = 'BASE TABLE'
	GROUP BY c.COLUMN_NAME, ca.DATA_TYPE, c.CHARACTER_OCTET_LENGTH, 
		c.NUMERIC_PRECISION, c.NUMERIC_SCALE, c.COLLATION_NAME
)
SELECT 
	SUM(COLUMN_COUNT) AS TABLE_COUNT, ct.COLUMN_NAME, 

	--This column could be suitable for copy/paste to Excel.
	--(In Excel, ensure "Wrap Text" is enabled. Choosing a fixed-width 
	--font for the column will also be helpful.)
	'=' + STRING_AGG('"' + REPLACE(ct.Tables, CHAR(13) + CHAR(10), '" & CHAR(10) & "') + '"', ' & CHAR(10) & ') AS Tables_Excel,

	--Output as XML for easy viewing from the SSMS results grid.
	(
		SELECT 'COLUMN: ' + QUOTENAME(ct.COLUMN_NAME) + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10) +
			STRING_AGG(ct.Tables, CHAR(13) + CHAR(10))
		FOR XML PATH(''),TYPE
	) AS Tables_XML
FROM ColumnTypes ct
GROUP BY ct.COLUMN_NAME
HAVING COUNT(*) > 1;
